//innerJoin = Select

/*
db.select([
    "preco",
    "Local_id"
]).table("produtos").innerJoin("estoque", "estoque.id_Produto", "produtos.idProdutos").then((data)=>{
    console.log(data)
}).catch((err)=>{
    console.log(err)
});

db.select([
    "produtos.*"
]).table('estoque').innerJoin('produtos', 'produtos.idProdutos', 'estoque.id_Produto').then((data)=>{
    console.log(data)
})

*/

//Update associated 1 a 1
/*
db.update({
    nome: "Carro"
}).where({
    idProdutos: 6
}).table("produtos").then((Data)=>{
    console.log(Data)
}).catch((err)=>{
    console.log(err)
})

*/

//Insert associated
/*
db.insert({
    Local_id: 1,
    id_Produto: 6,
    Nome: 'Celular',
    valor_produto: 100.00

}).table("estoque").then((data)=>{
    console.log(data)
})

//Relacao muitos para muitos
db.select(
    "nome_estudio as Nome Estudio: ",
    "games.nome as Nome Game: "
).table("games_estudios")
.innerJoin("games", "games.id", "game_id") // Busque na tabela games o games.id do game e compare game_id da tabela estudio
.innerJoin("estudios", "estudios.id", "games_estudios.estudio_id")
.where("games.id", 1)
.then((data) => {
    console.log(data)
}).catch((err) => {
    console.log(err)
})


//transaction = Prevencao de erros
async function teste(){
    try{
        await db.transaction(async trans => {
            await db.insert({nome_estudio: 'Axios'}).table("estudios")
            await db.insert({nome_estudio: 'Guia'}).table("estudios")
            await db.insert({nome_estudio: 'Systems'}).table("estudios")
            await db.insert({nome_estudio: 'Fuull'}).table("estudios")
        });
    }catch(err){
        console.log(err);
    }   
}

teste();

*/